
 TODO:
   - rewrite rand $FLEN 1 to return the value and work with $RAND
   - fix MAX_LINE and MIN_LINE to be MIN_LIM for example, as far also 
     indexes in the array are generated with rand(), so "line" here is misleading

 All the functions are sourced with init.sh, that dives into lib directory to call lib.sh that in turn will source 
 all the files located in lib. init.sh execution will end up in the base dict directory to keep consequent calls related
 to the base directory.

 Sourced scripts are:

	arrays.sh
	clear_screen.sh
	game.sh
	lib.sh
	opt.sh
	vt100.sh

 	get_arg()
 Game mode is triggered with the -x option optionally accepting a number of the games to be played.

 DICT_FILE tracks full path to the dictionary file in use.
 
 play()
	 cursor is set to off (create a function)
   Find file length (with flen())
	 RAND_LINE_MAX # 4 <= FLEN
 
 quest() ->

  rand_line() 

    i local
    Generate $RAND_LINE_MAX numbers in range of 
      rand()
        LIMIT amount of digits within number 2 in 11, 2 cut from 55555
        in range of FLEN 

     MIN_LINE >= i <= MAX_LINE

   and store them in rand_l[] if not already stored (dup()).
   Using rand() again to choose random index within rand_l[] to agree on the line that will be asked
   for. From there need to retrieve a word with IFS=,

   Store the correct index in TRUE, that is RAND+1, as <select> issued from 1.

   Process each line stored in rand_l[] 
   Convert ', ' to ',' , retrieve only translation part. Now thanks to IFS we have array of elements separated by ','

  Now questions[] is 4 words and the correct one is RAND+1==TRUE==REPLY
   
	 GAME_MAX		# 4

  arrays.sh - useful functions

    dup()     test for duplicated value within array
 
 
  
# 
# Learning program.
#
# Dictionary file ($dict) is one that read and examined depends on the options specified.
# Program expects word on input to search dictionary file for. All the lines matching ^word will be displayed.
# Translation comma-separated list can be specified following the word. Word and its translatoins will be learned.
#
# Game mode can be issued using -q/--game option. Optional games count can be specified to control number of games.
#
# Dictionary file can be changed temporary or permanently using -d/--dictionary option. If option argument is ommitted the
# current dictionary file name is displayed. Filename if followed will be used either to search word translation or to be
# set to a default one if word is not specified.
#
# Global Variables:
#
#   OPTARG  - set to the option argument after call to get_arg()
#
